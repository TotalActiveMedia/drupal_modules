<?php
// $Id$

/**
 * @file
 *
 *  A module for querying a remote delving framework target and returning and displaying the results
 *
 */
define('DRS_SEARCH_PAGE_PATH', 'delving');
define('DRS_SEARCH_TAB_NAME', 'Delving Remote Search');
define('DRS_SEARCH_REMOTE_URL', 'http://norvegiana2.delving.org/services/api/search');
define('DRS_SEARCH_RESULTS_ROWS', 10);
define('DRS_SEARCH_DIGITAL_OBJECT', TRUE);

/**
 * Implementation of hook_search_info()
 */
function drs_search_info() {
  return array(
    'title' => variable_get('drs_search_tab_name', DRS_SEARCH_TAB_NAME),
    'path' => variable_get('drs_search_page_path', DRS_SEARCH_PAGE_PATH),
//    'callback' => 'drs_search_conditions_callback',
  );
}

/**
 * Implementation of hook_search_execute()
 */
function drs_search_execute($keys = NULL, $conditions = NULL) {

  $target = variable_get('drs_search_url', DRS_SEARCH_REMOTE_URL);

  $rows = variable_get('drs_search_results_rows', DRS_SEARCH_RESULTS_ROWS);

  $page = isset($_GET['page']) ? $_GET['page'] : 0;

  $start = $page * $rows;

  $has_digital_object = variable_get('drs_search_digital_object', DRS_SEARCH_DIGITAL_OBJECT);

  $url = $target . '?start=' . $start . '&rows=' . $rows . '&query=' . urlencode(str_replace(' ', '+', $keys));

  if ($has_digital_object == TRUE) {
    $url .= '&qf=HASDIGITALOBJECT:true';
  }

  // Send out the request
  $response = drupal_http_request($url);

  // We have a response code 200: success!
  if ($response->code == 200) {

    // Set the root of the response data
    $data = $response->data;

    $results = drs_process_results($data);

    return $results;
  }
  else {
    // Deal with HTTP errors
    switch ($response->code) {
      case 401:
        drupal_set_message(t('Yikes! A 401. Do we have the correct target url?'));
        break;
      default:
        drupal_set_message(t('Something went wrong @error', array(
          '@error' => 'HTTP ' . $response->code . ': ' . strip_tags($response->data),
        )), 'error');
        break;
    }
  }
}

/**
 * Takes the remote response and returns a results array
 */
function drs_process_results($data) {
  $xml = $data;
  if (!is_object($xml)) {
    $xml = new SimpleXMLElement($data);
  }
  // Are there any results?
  if ($xml->query['numFound'] > 0) {


    foreach ($xml->items->item as $result) {
      // First we need to deal with the namespaces
      $ns_dc = $result->children('http://purl.org/dc/elements/1.1/');
      $ns_dcterms = $result->children('http://purl.org/dc/terms/');
      $ns_abm = $result->children('http://to_be_decided/abm/');
      $ns_eu = $result->children('http://www.europeana.eu/schemas/ese/');

      // Is there an image to use as a thumbnail?
      if (!empty($ns_eu->isShownBy)) {
        $thumbnail = '<img src="'
          . check_url($ns_eu->isShownBy)
          . '" width="100" height="100" alt="'
          . check_plain($ns_dc->title) . '"/>';
      }
      else {
        $thumbnail = '';
      }

      // Check and see if the elements we want to display are not empty. If not, then add them to the $extra array

      $extra = array();

      if (!empty($ns_eu->dataProvider)) {
        $extra['provider'] = '<label>Provider: </label>' . check_plain($ns_eu->dataProvider);
      }
      if (!empty($ns_dcterms->created)) {
        $extra['date'] = '<label>Date: </label>' . check_plain($ns_dcterms->created);
      }
      if (!empty($ns_dc->subject)) {
        $extra['subject'] = '<label>Subject: </label>' . check_plain($ns_dc->subject);
      }
      if (!empty($ns_abm->county)) {
        $extra['county'] = '<label>County: </label>' . check_plain($ns_abm->county);
      }
      if (!empty($ns_abm->municipality)) {
        $extra['municipality'] = '<label>Municipality: </label>' . check_plain($ns_abm->municipality);
      }
      if (!empty($ns_abm->aboutPlace)) {
        $extra['place'] = '<label>Place: </label>' . check_plain($ns_abm->aboutPlace);
      }
      if (!empty($ns_abm->aboutPerson)) {
        $extra['person'] = '<label>Person(s): </label>' . check_plain($ns_abm->aboutPerson);
      }


      $results[] = array(
        // Link to remote page
        'link' => check_url($ns_eu->isShownAt),
        // Title of the object
        'title' => check_plain($ns_dc->title),
        // Node not used in our case
        //'node' => (array) $result, // Cast to array instead of SimpleXML.
        // the description field passed in 'snippet'
        'snippet' => check_markup($ns_dc->description),
        // And all the other fields we want to display
        'extra' => $extra,
        // And last but not least, the image
        'image' => $thumbnail,
      );
    }

  }

  return $results;
}

