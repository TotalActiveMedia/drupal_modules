<?php
// $Id$

/** * @file
 *
 * A module for making query to and getting results from a remote Delving Platform Search API.
 *
 */

define('DELVING_SEARCH_PAGE_NAME', 'Delving Search');
define('DELVING_SEARCH_PAGE_RETURN', 'Return to results');
define('DELVING_SEARCH_PAGE_PATH', 'drs/search');
define('DELVING_ITEM_PAGE_PATH', 'drs/item/%/%');

/**
 * Implements hook_menu()
 */
function delvingsearch_menu() {

  // Grab the path for the item display page and turn into array
  // to find the position of the last two elements (our obj id) in the path.
  // Give these positions to the 'page arguments' for this menu item so that
  // it can extract the object id from the URL and use it to send the query
  $path_ar = explode('/', variable_get('delving_item_page_path', DELVING_ITEM_PAGE_PATH));
  $first_arg = count($path_ar) - 2;
  $second_arg = count($path_ar) - 1;

  $items[variable_get('delving_search_page_path', DELVING_SEARCH_PAGE_PATH)] = array(
    'title' => variable_get('delving_search_page_name', DELVING_SEARCH_PAGE_NAME),
    'description' => 'Page for searching remote Delving Framework API without dependency on the Search module.',
    'page callback' => 'delvingsearch_load_search',
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );
  $items[variable_get('delving_item_page_path', DELVING_ITEM_PAGE_PATH)] = array(
    'title' => variable_get('delving_item_page_path', DELVING_ITEM_PAGE_PATH),
    'description' => 'Page for showing an individual search result item',
    'page callback' => 'delvingsearch_load_item',
    'page arguments' => array($first_arg, $second_arg),
    'access callback' => TRUE,
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}


/**
 * Callbacks for the hook_menu()
 *
 * Displays the page(s) and calls necessary functions needed to run the page functionality
 */
function delvingsearch_load_search() {
  drupal_add_css(drupal_get_path('module', 'delvingsearch') . '/delvingsearch.css');
  return drupal_get_form('delvingsearch_form');
}

function delvingsearch_load_item($obj_part1, $obj_part2) {

  module_load_include('inc', 'delvingsearch', 'includes/delving.item');

  $type = 'result-item';
  $obj_id = $obj_part1 . '/' . $obj_part2;
  $xml = delvingapi_remote_search(NULL, NULL, $obj_id, $type);
  $page = delvingsearch_show_item($xml);

  return $page;
}


/**
 * Implement hook_form()
 */
function delvingsearch_form($form, &$form_state) {

  // grab query parameters if there are any
  $qps = delvingapi_get_query_params();
  $html = '';

  // there is a query in the URL, do a search and fill up $html
  if (!empty($qps['query'])) {
    $type = 'result-list';
    $results = delvingapi_remote_search($qps['query'], $qps, $type);
    $html .= $results;
  }

  $form['query'] = array(
    '#type' => 'textfield',
    '#title' => t('Enter a search term'),
    '#size' => 60,
    '#maxlength' => 256,
    '#required' => TRUE,
  );
  $form['submit_query'] = array(
    '#type' => 'submit',
    '#value' => t('Find'),
  );
  $form['#suffix'] = $html;

  return $form;
}

function delvingsearch_form_submit($form, &$form_state) {
  // A simulated 'GET', a bit dirty but it does the job nicely
  // This way when a query is resubmitted using the pager or facet refinement, the same process is followed each time
  global $base_url;
  $redirect_url = $base_url . '/' . variable_get('delving_search_page_path', DELVING_SEARCH_PAGE_PATH);
  $redirect_url .= '?query=' . $form_state['values']['query'];
  $form_state['redirect'] = $redirect_url;
}


/**
 * Outputs html to display the returned results
 *
 * @param $xml
 * @param $query
 * @return void
 */
function delvingsearch_show_results($xml, $query) {

    $data = simplexml_load_string($xml);
    $total_records = $data->query['numFound'];
    $num_per_page = variable_get('delving_api_results_rows', DELVING_API_RESULTS_ROWS);

    $layout = array();
    foreach ($data->xpath("/results/layout/drupal/field") as $field) {
        $layout[(string)$field->key] = (string)$field->value;
    }

    pager_default_initialize($total_records, $num_per_page);

    $output = '<div id="delving">';
    $output .= '<h4>Number of records found: ' . $total_records . '</h4>';

    if ($total_records > 0 && $layout) {
        // set up the variables to pass along to the pager
        $variables = array(
            'parameters' => array(
                'query' => $query,
                'rows' => $num_per_page,
            ),
        );
        $output .= delvingsearch_breadcrumbs();
        $output .= theme('pager', $variables);
        $output .= "<table class='search-results'>";
        foreach ($data->xpath("/results/items/item") as $item) {

            $thumbnail = implode('',$item->xpath($layout["#thumbnail"]));
            $title = implode('',$item->xpath($layout["#title"]));

            $prefix = str_replace('%/%','',variable_get('delving_item_page_path', DELVING_ITEM_PAGE_PATH));

            $uri = $prefix . implode('',$item->xpath($layout["#uri"]));

            $output .= '<tr><td>';
            if ($thumbnail) {
                $output .= '<img width="100px" class="overlay" src="' . $thumbnail . '"/>';
            }
            else {
                $output .= '<p>no thumbnail</p>';
            }
            $output .= '</td><td>';
            $output .= '<h3>' . l($title, $uri) . '</h3>';
            foreach ($layout as $key => $value) {
                if (substr($key,0,1) != '#') {
                    $value_array = $item->xpath($value);
                    if ($value_array) {
                        $value = implode(', ', $value_array);
                        $output .= '<strong>' . $key . ': </strong>' . $value . '<br/>';
                    }
                }
            }
            $output .= '</td></tr>';
        }
        $output .= '</table>';
        $output .= theme('pager', $variables);
    }
    else {
        $output .= "No results found. Please try another search";
    }

    $output .= '</div>';
    return $output;
}

/**
 * Implements hook_block_info()
 */
function delvingsearch_block_info() {

  $blocks = array();
  $blocks['county'] = array(
    'info' => t('Delving Facets: County'),
    'status' => 0,
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => variable_get('delving_search_page_path', DELVING_SEARCH_PAGE_PATH),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['municipality'] = array(
    'info' => t('Delving Facets: Municipality'),
    'status' => 0,
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => variable_get('delving_search_page_path', DELVING_SEARCH_PAGE_PATH),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['namedplace'] = array(
    'info' => t('Delving Facets: Named Place'),
    'status' => 0,
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => variable_get('delving_search_page_path', DELVING_SEARCH_PAGE_PATH),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['aboutperson'] = array(
    'info' => t('Delving Facets: About Person'),
    'status' => 0,
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => variable_get('delving_search_page_path', DELVING_SEARCH_PAGE_PATH),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['provider'] = array(
    'info' => t('Delving Facets: Provider'),
    'status' => 0,
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => variable_get('delving_search_page_path', DELVING_SEARCH_PAGE_PATH),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['dataprovider'] = array(
    'info' => t('Delving Facets: Dataprovider'),
    'status' => 0,
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => variable_get('delving_search_page_path', DELVING_SEARCH_PAGE_PATH),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['type'] = array(
    'info' => t('Delving Facets: Type'),
    'status' => 0,
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => variable_get('delving_search_page_path', DELVING_SEARCH_PAGE_PATH),
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implement hook_block_view()
 *
 * @param $delta
 * The name of the requested block
 */
function delvingsearch_block_view($delta = '') {

  // Create an empty block
  $block = array(
    'subject' => '',
    'content' => '',
  );

  switch ($delta) {
    case 'county':
      $block['subject'] = t('County');
      $block['content'] = delvingsearch_facet_get('COUNTY');
      break;
    case 'municipality':
      $block['subject'] = t('Municipality');
      $block['content'] = delvingsearch_facet_get('MUNICIPALITY');
      break;
    case 'namedplace':
      $block['subject'] = t('Named Place');
      $block['content'] = delvingsearch_facet_get('NAMEDPLACE');
      break;
    case 'aboutperson':
      $block['subject'] = t('About Person');
      $block['content'] = delvingsearch_facet_get('ABOUTPERSON');
      break;
    case 'provider':
      $block['subject'] = t('Provider');
      $block['content'] = delvingsearch_facet_get('PROVIDER');
      break;
    case 'dataprovider':
      $block['subject'] = t('Dataprovider');
      $block['content'] = delvingsearch_facet_get('DATAPROVIDER');
      break;
    case 'type':
      $block['subject'] = t('Type');
      $block['content'] = delvingsearch_facet_get('TYPE');
      break;
  }
  // Only display the block if it actually has any content
  if (count($block['content']['#items']) > 0) {
    return $block;
  }

}

function delvingsearch_facets() {

  if (delving_has_searched() == TRUE) {
    $facets = array();
    // Use the response cache to grab the facets
    $xml = delving_static_response_cache();
    // Check to make sure we have an XML object to work with
    if (!is_object($xml)) {
      $xml = new SimpleXMLElement($xml);
    }
    // Are there any results?
    if ($xml->query['numFound'] > 0) {
      delving_has_facets(TRUE);
      // Use xpath to create facets as array
      $facets['facets'] = $xml->xpath('/results/facets/facet');
      $facets['query'] = $xml->xpath('/results/query/terms');
    }
  }
  else {
    $facets = 0;
  }
  return $facets;

}

function delvingsearch_facet_get($facet_name) {
  $facets_ar = delvingsearch_facets();
  $qps = delvingapi_get_query_params();
  $terms = $qps['query'];
  $items = array();
  $content = '';
  global $base_url;
  if (!empty($terms) && (delving_has_facets() == TRUE)) {
    foreach ($facets_ar['facets'] as $facet) {
      if ($facet->link && $facet['name'] == $facet_name) {
        foreach ($facet->link as $link) {
          $facet_link = $link['url'];
          // absolute path!!! relative paths trigger url encoding of the complete url, which we do not want.
          $furl = url($base_url . '/' . variable_get('delving_search_page_path', DELVING_SEARCH_PAGE_PATH)) . '?query=' . $terms . $facet_link;
          $options = array();
          $options['attributes']['class'] = 'selected';
          if (!empty($facet_link)) {
            if ($link['isSelected'] != 'true') {
              $items[] = l(trim($link), $furl);
            }
            else {
              $items[] = l(trim($link), $furl, $options);
            }
          }
        }
      }
    }
  }
  $content = array(
    '#theme' => 'item_list',
    '#items' => $items
  );

  return $content;
}

function delvingsearch_breadcrumbs() {
  if (delving_has_searched() == TRUE) {
    $xml = delving_static_response_cache();
    $breadcrumbs = array();
    // Check to make sure we have an XML object to work with
    if (!is_object($xml)) {
      $xml = new SimpleXMLElement($xml);
    }
    if ($xml->query['numFound'] > 0) {
      $breadcrumbs = $xml->xpath('/results/query/breadCrumbs/breadcrumb');
      // drupal_set_message(print_r($breadcrumbs));
    }
    $out = '<div class="delving-breadcrumbs">';
    $out .= t('Your searched for:');

    // Temporary measure until HASDIGITALOBJECT is a hidden query filter
    //$crumbs = delving_remove_element($breadcrumbs, 'HASDIGITALOBJECT:true');

    $numItems = count($breadcrumbs);
    $i = 1;
    foreach ($breadcrumbs as $crumb) {

      $text = $crumb;
      $href = url(variable_get('delving_search_page_path', DELVING_SEARCH_PAGE_PATH)) . '?query=' . str_replace('query=', '', $crumb['href']);

      if ($i != $numItems) {
        $out .= '<a class="crumb" href="' . $href . '">' . $crumb . '</a>> ';
      }
      else {
        $out .= $crumb;
      }

      $i++;

    }

    $out .= '</div>';
    return $out;
  }
}

