<?php
// $Id$

/** * @file
 *
 * A module for making query to and getting results from a remote Delving Platform Search API.
 *
 */
define('DELVING_SEARCH_PAGE_NAME', 'Delving Search');
define('DELVING_SEARCH_RESULTS_PAGE_PATH', 'delving/search');
define('DELVING_SEARCH_RESULTS_TITLE_LENGTH', '');
define('DELVING_SEARCH_RESULTS_DISPLAY_STYLE', 'list');
define('DELVING_SEARCH_RESULTS_DESCRIPTION_LENGTH', '');
define('DELVING_SEARCH_THUMB_WIDTH', '165');
define('DELVING_SEARCH_ITEM_PAGE_PATH', 'delving/search/item/%/%');
define('DELVING_SEARCH_THUMB_VIEWER_HEIGHT', '165');
define('DELVING_SEARCH_ITEM_PAGE_RETURN_TO_RESULTS', 'Return to results');
define('DELVING_SEARCH_ITEM_VIEW_PATH', 'drupal');
define('DELVING_SEARCH_ITEM_EXTERNAL_URL', 'http://norvegiana2.delving.org/portal/object/');
define('DELVING_SEARCH_ITEM_HYPERLINK_BUTTON', 1);
define('DELVING_SEARCH_ITEM_SHOW_IN_ORIGINAL_CONTEXT', '');
define('DELVING_SEARCH_OBJECT_IMG_WIDTH', 300);
define('DELVING_SEARCH_WIKI_API_URL_1', '');
define('DELVING_SEARCH_WIKI_API_URL_2', '');
define('DELVING_SEARCH_WIKI_API_URL_3', '');
define('DELVING_SEARCH_WIKI_TARGET_URL_1', '');
define('DELVING_SEARCH_WIKI_TARGET_URL_2', '');
define('DELVING_SEARCH_WIKI_TARGET_URL_3', '');
define('DELVING_SEARCH_SOCIAL_WIDGET_DISPLAY', '1');
define('DELVING_SEARCH_SOCIAL_WIDGET_TYPE', '3');

/**
 * Implements hook_help()
 */
function delvingsearch_help($path,$arg) {
  switch($path) {
    case 'admin/help#delvingsearch':
      $output = '';
      $output .= '<h3>' . t('About') .'</h3>';
      $output .= '<p>' . t('The Delving Remote Search Results module is used for displaying results retrieved from the Delving API Module.') .'</p>';
      $output .= '<h3>' . t('Results Page Settings') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt><strong>' . t('Page Name') .'</strong></dt>';
      $output .= '<dd>' . t('The title of the Search and Results Page. This is also the title that will appear by in the navigation menu. If you change this value you must empty the Drupal cache for the change to become visible.') .'</dd>';
      $output .= '<dt><strong>' . t('Results Layout') .'</strong></dt>';
      $output .= '<dd>' . t('Here you can toggle between "list" or "grid" view for the layout of the results page.') .'</dd>';
      $output .= '<dt><strong>' . t('Field Lengths') .'</strong></dt>';
      $output .= '<dd>' . t('Sometimes the values for certain fields may be too long to maintain a pleasing layout. Here you can limit the length of the "title" and "description" fields. The string will be truncated at the nearest word and ellipsis will be added at the end. Leave blank to display the complete value.') . '<br/> ' .
                 '<strong>' . t('Translation note: Because the "description" field is isolated for truncation it\'s label can not be translated "on the fly" by this module\'s API\'s "Environment Language" setting. However, the term is surrounded by the drupal t() function, and can be translated via Drupal\'s own Localization API.') . '</strong>';
      $output .= '<dt><strong>' . t('Thumbnail Display') .'</strong></dt>';
      $output .= '<dd>' . t('Depending on the Results Layout you choose, you may wish to change the width of the thumbnails in order to get the most pleasing layout.');
      $output .= '<ul><li><strong>' . t('Thumbnail Width') . ':</strong> ' . t('The actual width (in pixels) of the thumbnail image') . '</li>';
      $output .= '<li><strong>' . t('Thumbnail Container Height') .':</strong> ' . t('The height of the wrapper around the thumbnail image. If the image height is greater than the wrapper, then part of the image is hidden. Play around with this setting when you have chosen "grid" as Page Layout to find the most visually pleasing dimensions.') . '</li></ul></dd>';
      $output .= '<dt><strong>' . t('Facets Display') .'</strong></dt>';
      $output .= '<dd>' . t('Facets are used to refine the search results. The display of the Facets is done on the "Blocks" configuration page. The block with facets will appear only if the search results contain the facets, otherwise the block will not appear.') . '</dd>';
      $output .= '</dl>';
      $output .= '<h3>' . t('Item Page Settings') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt><strong>' . t('Item Page Location') .'</strong></dt>';
      $output .= '<dd>' . t('This is where the thumbnail and title will link to from the initial returned results.');
      $output .=  '<ul><li>' . t('"Within Drupal" will open the item page in the current Drupal environment.') . '</li>';
      $output .= '<li>' . t('"In original context from the Data Provider" will open the page outside of the Drupal environment and in the website from the provider of the object') . '</li>';
      $output .= '<li>' . t('"A Delving Platform portal" will open the page outside of the Drupal environment and on the item page of a provider running a portal instance of the Delving Platform') . '</li></ul>';
      $output .= '<dt><strong>' . t('Return to results') . '</strong></dt>';
      $output .= '<dd>' . t('This is the text that will appear as a hyperlink back to the results page.') . '</dd>';
      $output .= '<dt><strong>' . t('Original Context Field') . '</strong></dt>';
      $output .= '<dd>' . t('Choose if you want to display the field containing the hyperlink back to the item you are viewing in it\'s original context (i.e. the originating Data Provider).') . '</dd>';
      $output .= '<dt><strong>' . t('Hyperlink Styles') . '</strong></dt>';
      $output .= '<dd>' . t('If set to "Button" will add a css class to the "Return to Results" and "Show in Original Context" hyperlinks which will style them like an attractive button.') . '</dd>';
      $output .= '<dt><strong>' . t('Object Image') . '</strong></dt>';
      $output .= '<dd>' . t('Set the width (in pixels) of the image associated with the item you are viewing.') . '</dd>';
      $output .= '<h3>' . t('Extra Search Result Blocks from Wikipedia or similar targets') . '</h3>';
      $output .= '<p>' . t('Configure the display of more results from an external Wikipedia or wikipedia-like target. Check the documentation of the external wiki service you wish to use for details. Leave these fields blank if you do not wish to return extra results.') . '</p>';
      $output .= '<dt><strong>' . t('API URL') . '</strong></dt>';
      $output .= '<dd>' . t('The URL of the API where the search will be sent to and which will return a results list for that query') . '</dd>';
      $output .= '<dt><strong>' . t('TARGET URL') . '</strong></dt>';
      $output .= '<dd>' . t('The URL of the page where the returned results can be viewed.') . '</dd>';
      $output .= '</dl>';

     return $output;
  }
}

/**
 * Implements hook_menu()
 */
function delvingsearch_menu() {

  // Grab the path for the item display page and turn into array
  // to find the position of the last two elements (our obj id) in the path.
  // Give these positions to the 'page arguments' for this menu item so that
  // it can extract the object id from the URL and use it to send the query
  $path_ar = explode('/', variable_get('delving_search_item_page_path', DELVING_SEARCH_ITEM_PAGE_PATH));
  $first_arg = count($path_ar) - 2;
  $second_arg = count($path_ar) - 1;

  $items['admin/config/search/delving-search'] = array(
    'title' => 'Delving Remote Search Results Settings',
    'description' => 'Configure result layout, thumbnail widths, field lengths, etc.',
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('delvingsearch_admin_settings'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/delvingsearch.admin.inc'
  );

  $items[variable_get('delving_search_results_page_path', DELVING_SEARCH_RESULTS_PAGE_PATH)] = array(
    'title' => variable_get('delving_search_page_name', DELVING_SEARCH_PAGE_NAME),
    'description' => 'Page for searching remote Delving Framework API.',
    'page callback' => 'delvingsearch_load_search',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items[variable_get('delving_search_results_page_path', DELVING_SEARCH_RESULTS_PAGE_PATH)] = array(
    'title' => variable_get('delving_search_page_name', DELVING_SEARCH_PAGE_NAME),
    'description' => 'Page for searching remote Delving Framework API.',
    'page callback' => 'delvingsearch_load_search',
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );
  $items[variable_get('delving_item_page_path', DELVING_SEARCH_ITEM_PAGE_PATH)] = array(
    'title' => variable_get('delving_item_page_path', DELVING_SEARCH_ITEM_PAGE_PATH),
    'description' => 'Page for showing an individual search result item',
    'page callback' => 'delvingsearch_load_item',
    'page arguments' => array($first_arg),
    'load arguments' => array($second_arg),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}


/**
 * Callbacks for the hook_menu()
 *
 * Displays the page(s) and calls necessary functions needed to run the page functionality
 */
function delvingsearch_obj_load($arg1, $arg2) {
  drupal_add_css(drupal_get_path('module', 'delvingsearch') . '/delvingsearch.css');
  //drupal_add_js(drupal_get_path('module', 'delvingsearch') . '/delvingsearch.js');
  module_load_include('inc', 'delvingsearch', 'includes/delvingsearch.item');
  $obj_id = $arg1 . '/' . $arg2;
  $xml = delvingapi_get_item($obj_id);
  return $xml;
}
function delvingsearch_load_search() {
  drupal_add_css(drupal_get_path('module', 'delvingsearch') . '/delvingsearch.css');
//  drupal_add_js(drupal_get_path('module', 'delvingsearch') . '/delvingsearch.js');
  return drupal_get_form('delvingsearch_form');
}

function delvingsearch_load_item($xml) {
  $page = delvingsearch_show_item($xml);
  return $page;
}


/**
 * Implements hook_form()
 */
function delvingsearch_form($form, &$form_state) {
  module_load_include('inc', 'delvingsearch', 'includes/delvingsearch.list');
  // grab query parameters if there are any
  $qps = delvingapi_get_query_params();
  $results = '';
  //i'm guessing the admin variable search page name goes here
  drupal_set_title(variable_get('delving_search_page_name'));
  drupal_add_js(drupal_get_path('module','delvingsearch') . '/delvingsearch.js');
  
  // there is a query in the URL, do a search and fill up $html
  if (!empty($qps['query'])) {
    $query = $qps['query'];
    $data = delvingapi_get_list($query, $qps);
    $result = delving_static_response_cache();
    $result = simplexml_load_string($result);
    $results = delvingsearch_make_tabs($result, $qps);
    $results .= delvingsearch_show_list($data, $query);
  }
  $facet = array(
      'COUNTY' => '',
      'TYPE' => '',
      'MUNICIPALITY' => '',
    );
  if (!empty($qps['query'])): {
    foreach ($result->xpath("//breadcrumb") as $t) {
      $name = implode('',$t->xpath('@field'));
      if (empty($name)): {
        $query = implode('',$t->xpath('@value'));
      }
      else: {
        $facet[$name] = implode('',$t->xpath('@value')); 
      }
      endif;
    }
  }
  else: {
    $query = '';
  }
  endif;
    
  $form['query'] = array(
    '#type' => 'textfield',
    '#title' => t('Enter a search term'),
    '#size' => 60,
    '#default_value' => $query,
    '#maxlength' => 256,
  );
  $form['submit_query'] = array(
    '#type' => 'submit',
    '#value' => t('Find'),
  );
  $form['advanced'] = array(
    '#type' => 'fieldset',
    '#title' => t('Advanced search settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['advanced']['county'] = array(
    '#type' => 'textfield',
    '#title' => t('County'),
    '#size' => 60,
    '#default_value' => $facet['COUNTY'],
    '#maxlength' => 256,
	);
  $form['advanced']['municipality'] = array(
    '#type' => 'textfield',
    '#title' => t('Municipality'),
    '#size' => 60,
    '#default_value' => $facet['MUNICIPALITY'],
    '#maxlength' => 256,
  );
  $form['advanced']['type'] = array(
    '#type' => 'select',
    '#title' => t('Search by type'),
    '#default_value' => $facet['TYPE'],
    '#options' => array('' => t('All'), 'IMAGE' => t('Images'), 'TEXT' => t('Text')),
  );
  $form['#suffix'] = $results;
  return $form;
}

/**
 * Implements hook_form_submit()
 */
function delvingsearch_form_submit($form, &$form_state) {
  // A simulated 'GET', a bit dirty but it does the job nicely
  // This way when a query is resubmitted using the pager or facet refinement, the same process is followed each time
  global $base_url;
  $redirect_url = $base_url . '/' . variable_get('delving_search_page_path', DELVING_SEARCH_RESULTS_PAGE_PATH);
  if (!empty($form_state['values']['query'])): { $redirect_url .= '?query=' . $form_state['values']['query']; }
  else: $redirect_url .= '?query=*:*';
  endif;
  if (!empty($form_state['values']['county'])) { $redirect_url .= '&qf[]=COUNTY:' . $form_state['values']['county']; }
  if (!empty($form_state['values']['municipality'])) { $redirect_url .= '&qf[]=MUNICIPALITY:' . $form_state['values']['municipality']; }
  if (!empty($form_state['values']['type'])) { $redirect_url .= '&qf[]=TYPE:' . $form_state['values']['type']; }
  $form_state['redirect'] = $redirect_url;
}


/**
 * Implements hook_block_info()
 */
function delvingsearch_block_info() {

  $blocks = array();
//  $blocks['search'] = array(
//    'info' => t('Delving Simple Search Form'),
//    'status' => 0,
//    'visibility' => BLOCK_VISIBILITY_LISTED,
//    'cache' => DRUPAL_NO_CACHE,
//  );
//  $blocks['delving-search'] = array(
//    'info' => t('Delving Search Form'),
//    'status' => 0,
//    'visibility' => BLOCK_VISIBILITY_LISTED,
//    'pages' => variable_get('delving_search_page_path', DELVING_SEARCH_RESULTS_PAGE_PATH),
//    'cache' => DRUPAL_NO_CACHE,
//  );
  $blocks['county'] = array(
    'info' => t('Delving Facets: County'),
    'status' => 0,
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => variable_get('delving_search_page_path', DELVING_SEARCH_RESULTS_PAGE_PATH),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['municipality'] = array(
    'info' => t('Delving Facets: Municipality'),
    'status' => 0,
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => variable_get('delving_search_page_path', DELVING_SEARCH_RESULTS_PAGE_PATH),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['namedplace'] = array(
    'info' => t('Delving Facets: Named Place'),
    'status' => 0,
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => variable_get('delving_search_page_path', DELVING_SEARCH_RESULTS_PAGE_PATH),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['aboutperson'] = array(
    'info' => t('Delving Facets: About Person'),
    'status' => 0,
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => variable_get('delving_search_page_path', DELVING_SEARCH_RESULTS_PAGE_PATH),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['provider'] = array(
    'info' => t('Delving Facets: Provider'),
    'status' => 0,
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => variable_get('delving_search_page_path', DELVING_SEARCH_RESULTS_PAGE_PATH),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['dataprovider'] = array(
    'info' => t('Delving Facets: Data Provider'),
    'status' => 0,
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => variable_get('delving_search_page_path', DELVING_SEARCH_RESULTS_PAGE_PATH),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['type'] = array(
    'info' => t('Delving Facets: Type'),
    'status' => 0,
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => variable_get('delving_search_page_path', DELVING_SEARCH_RESULTS_PAGE_PATH),
    'cache' => DRUPAL_NO_CACHE,
  );
  for ($i = 1; $i < 4; $i++) {
    $blocks['wiki-'.$i] = array(
      'info' => t('Delving: Wikipedia Search Results: ' . $i),
      'status' => 0,
      'visibility' => BLOCK_VISIBILITY_LISTED,
      'pages' => 'delving/search/item/*',
      'cache' => DRUPAL_NO_CACHE,
    );
  }
  return $blocks;
}

/**
 * Implement hook_block_view()
 *
 * @param $delta
 * The name of the requested block
 */
function delvingsearch_block_view($delta = '') {

  // Create an empty block
  $block = array(
    'subject' => '',
    'content' => '',
  );

  switch ($delta) {
    case 'delving-search':
      $block['subject'] = t('Search');
      $block['content'] = t('Search box goes here');
    case 'county':
      $block['subject'] = t('County');
      $block['content'] = delvingsearch_facet_get('COUNTY');
      break;
    case 'municipality':
      $block['subject'] = t('Municipality');
      $block['content'] = delvingsearch_facet_get('MUNICIPALITY');
      break;
    case 'namedplace':
      $block['subject'] = t('Named Place');
      $block['content'] = delvingsearch_facet_get('NAMEDPLACE');
      break;
    case 'aboutperson':
      $block['subject'] = t('About Person');
      $block['content'] = delvingsearch_facet_get('ABOUTPERSON');
      break;
    case 'provider':
      $block['subject'] = t('Provider');
      $block['content'] = delvingsearch_facet_get('PROVIDER');
      break;
    case 'dataprovider':
      $block['subject'] = t('Data Provider');
      $block['content'] = delvingsearch_facet_get('DATAPROVIDER');
      break;
    case 'type':
      $block['subject'] = t('Type');
      $block['content'] = delvingsearch_facet_get('TYPE');
      break;
    case 'wiki-1':
      $block['subject'] = t('More Results from ...');
      $block['content'] = delvingsearch_wiki_get($wiki_index=1);
      break;
    case 'wiki-2':
      $block['subject'] = t('More Results from ...');
      $block['content'] = delvingsearch_wiki_get($wiki_index=2);
      break;
    case 'wiki-3':
      $block['subject'] = t('More Results from ...');
      $block['content'] = delvingsearch_wiki_get($wiki_index=3);
      break;
  }
  // Only display the block if it actually has any content
  if (count($block['content']['#items']) > 0) {
    return $block;
  }
//  return $block;

}
function delvingsearch_make_tabs($result, $qps) {
  $tab = '';
  foreach ($result->xpath("//facet") as $t) {
    $facetname = implode('',$t->xpath("@name"));
    if ($facetname == 'TYPE' && empty($tabsdone)): {
      //Don't act on the first <facet>, it contains the result set only, not including the possibility to extend to other types.
      $tabsdone = 1;
    }
    elseif ($facetname == 'TYPE' && !empty($tabsdone)): {
      $tab .= '<div class="delvingtabs">';
      global $base_url;
      $opt['attributes']['class'] = 'menutab';
      if (strpos($qps['qf'], 'TYPE')>0): {
        $qfs = explode('&qf[]', $qps['qf']);
        $allqf = '';
        foreach($qfs as $q) {
          if (empty($q)): {
            //skip the empty qfs in the array
          }
          elseif (strpos($q, 'TYPE:')): {
            $allqf .= '';
          }
          else: {
            $allqf .= '&qf[]' . $q;
          }
          endif;
        }
        $furl = $base_url . '/' . variable_get('delving_search_page_path', DELVING_SEARCH_RESULTS_PAGE_PATH) . '?query=' . $qps['query'] . $allqf;
      }
      else: {
        $opt['attributes']['class'] .= ' active';
        $allqf = $qps['qf'];
        $furl = $base_url . '/' . variable_get('delving_search_page_path', DELVING_SEARCH_RESULTS_PAGE_PATH) . '?query=' . $qps['query'] . $qps['qf'];
      }
      endif;
      $tab .= l(t('All'), $furl, $opt);;
      foreach ($t->xpath("link") as $l) {
        $furl = $base_url . '/' . variable_get('delving_search_page_path', DELVING_SEARCH_RESULTS_PAGE_PATH) . '?query=' . $qps['query'] . $allqf . '&qf[]=TYPE:' . implode('',$l->xpath('@value'));
        $options['attributes']['class'] = 'menutab';
        //If the type is already selected, let's make it different looking and clickable to remove the constrain.
        if (implode('',$l->xpath('@isSelected')) == 'true') {
          $options['attributes']['class'] .= ' active';
          $removethis = '&qf[]=TYPE:' . implode('',$l->xpath('@value'));
          $qf = str_replace($removethis, '', $qps['qf']);
          $furl = $base_url . '/' . variable_get('delving_search_page_path', DELVING_SEARCH_RESULTS_PAGE_PATH) . '?query=' . $qps['query'] . $qf;
        }
        $tab .= l(implode('',$l->xpath('@value')) . ' (' . implode('',$l->xpath('@count')) . ')', $furl, $options);
        /* $tab['type'] = implode('',$l->xpath('@value'));
        $tab[$i]['count'] = implode('',$l->xpath('@count')); */
      }
    $tab .= '</div>';
    }
    endif;
  }
  return $tab;
}

function delvingsearch_wiki_get($wiki_index)
{
  // Use the response cache to grab the query
  // And don't run this if the query is the catch-all *:*
  if (isset($_COOKIE['delving-query']) && $_COOKIE['delving-query'] != "*:*") {
    $query = $_COOKIE['delving-query'];
  }
  else {
    return;
  }
  $api_url = variable_get('delving_search_wiki_api_url_'.$wiki_index);
  $target_url = variable_get('delving_search_wiki_target_url_'.$wiki_index);

  if((trim($api_url)!='') && trim($target_url)!=''){
  //using another parameter to search free-text instead of "...starting with".
  $response = drupal_http_request($api_url . '?action=query&list=search&srsearch=' . urlencode($query) . '&format=json');
  if ($response->code == 200) {
    // Set the root of the response data
    $data = json_decode($response->data);
	//$term = $data[0];
    if (!empty($data->query->search)) {
      $items_raw = $data->query->search;
      $items = array();
      $i = 0;
      foreach($items_raw as $item){
         $items[] = '<a title="'. strip_tags($item->snippet) .'" href="' . $target_url .  $item->title . '">' . $item->title . '</a>';
        $i++;
      }
      // Give back
      $content = array(
        '#theme' => 'item_list',
        '#items' => $items
      );
    return $content;
    }
  }
  else {
    // Deal with HTTP errors
    switch ($response->code) {
      case 401:
        drupal_set_message(t('Yikes! A 401. Do we have the correct target url?'));
        break;
      default:
        drupal_set_message(t('Something went wrong @error', array('@error' => 'HTTP ' . $response->code . ': ' . strip_tags($response->data),)), 'error');
        break;
    }
  }

  }
}

function delvingsearch_facets() {

  if (delving_has_searched() == TRUE) {
    $facets = array();
    // Use the response cache to grab the facets
    $xml = delving_static_response_cache();
    // Check to make sure we have an XML object to work with
    if (!is_object($xml)) {
      $xml = new SimpleXMLElement($xml);
    }
    // Are there any results?
    if ($xml->query['numFound'] > 0) {
      delving_has_facets(TRUE);
      // Use xpath to create facets as array
      $facets['facets'] = $xml->xpath('/results/facets/facet');
      $facets['query'] = $xml->xpath('/results/query/terms');
    }
  }
  else {
    $facets = 0;
  }
  return $facets;

}

function delvingsearch_facet_get($facet_name) {
  $facets_ar = delvingsearch_facets();
  $qps = delvingapi_get_query_params();
  $terms = $qps['query'];
  $items = array();
  $content = '';
  global $base_url;
  if (!empty($terms) && (delving_has_facets() == TRUE)) {
    foreach ($facets_ar['facets'] as $facet) {
      if ($facet->link && $facet['name'] == $facet_name) {
        foreach ($facet->link as $link) {
          $facet_link = $link['url'];
          // absolute path!!! relative paths trigger url encoding of the complete url, which we do not want.
          $furl = url($base_url . '/' . variable_get('delving_search_page_path', DELVING_SEARCH_RESULTS_PAGE_PATH)) . '?query=' . $terms . $facet_link;
          $options = array();
          $options['attributes']['class'] = 'selected';
          if (!empty($facet_link)) {
            if ($link['isSelected'] != 'true') {
              $items[] = '<input type="checkbox">' . l(trim($link), $furl);
            }
            else {
              $items[] = '<input type="checkbox" checked>' . l(trim($link), $furl, $options);
            }
          }
        }
      }
    }
  }
  $content = array(
    '#theme' => 'item_list',
    '#items' => $items
  );

  return $content;
}


function delvingsearch_breadcrumbs() {
  if (delving_has_searched() == TRUE) {
    $xml = delving_static_response_cache();
    $breadcrumbs = array();
    // Check to make sure we have an XML object to work with
    if (!is_object($xml)) {
      $xml = new SimpleXMLElement($xml);
    }
    if ($xml->query['numFound'] > 0) {
      $breadcrumbs = $xml->xpath('/results/query/breadCrumbs/breadcrumb');
      // drupal_set_message(print_r($breadcrumbs));
    }
    $out = '<div class="delving-breadcrumbs">';
    $out .= t('Your searched for') . ':&#160;';

    // Temporary measure until HASDIGITALOBJECT is a hidden query filter
    //$crumbs = delving_remove_element($breadcrumbs, 'HASDIGITALOBJECT:true');

    $numItems = count($breadcrumbs);
    $i = 1;
    foreach ($breadcrumbs as $crumb) {

      $text = $crumb;
      $href = url(variable_get('delving_search_page_path', DELVING_SEARCH_RESULTS_PAGE_PATH)) . '?query=' . str_replace('query=', '', $crumb['href']);

      if ($i != $numItems) {
        $out .= '<a class="crumb" href="' . $href . '">' . $crumb . '</a>> ';
      }
      else {
        $out .= $crumb;
      }

      $i++;

    }

    $out .= '</div>';
    return $out;
  }
}