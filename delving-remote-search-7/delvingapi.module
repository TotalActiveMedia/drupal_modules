<?php
/**
 *
 * @file
 * Wrapper for a Delving Remote Search API
 *
 * @author eric@delving.eu
 *
 *
 */

define('DELVING_SETTINGS_MENU_PATH', 'Administer/Site configuration/Delving Remote-Search API Settings');
define('DELVING_API_REMOTE_URL', 'http://norvegiana2.delving.org/services/api/search');
define('DELVING_API_RESULTS_ROWS', 12);
define('DELVING_API_DIGITAL_OBJECT', TRUE);
define('DELVING_API_HQFS', '');
define('DELVING_API_LANGUAGE', 'en');

/**
 * Implement hook_menu()
 */
function delvingapi_menu() {
  $items[variable_get('delving_settings_menu_path', DELVING_SETTINGS_MENU_PATH)] = array(
    'title' => 'Delving Remote-Search Settings',
    'description' => 'Configure Search URL, etc. for Delving Remote-Search API',
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('delving_admin_settings'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/delvingapi.admin.inc'
  );
  return $items;
}

/**
 * Takes a query term and builds a url to return a list of results
 *
 * @param null $query
 * @param null $qps
 * @return
 */
function delvingapi_get_list($query = NULL, $qps = NULL) {
  $target = variable_get('delving_api_remote_url', DELVING_API_REMOTE_URL);
  $rows = variable_get('delving_api_results_rows', DELVING_API_RESULTS_ROWS);
  $start = $qps['start'];
  $has_digital_object = variable_get('delving_api_digital_object', DELVING_API_DIGITAL_OBJECT);
  $language = variable_get('delving_api_language', DELVING_API_LANGUAGE);

  $hqfs = variable_get('delving_api_hqfs', DELVING_API_HQFS);
  // remove the [] from the qf[] key before being sent to search api
  $query_facets = str_replace('qf[]=', 'qf=', $qps['qf']);

  // clean up the search terms before sending
  $search_terms = urlencode(str_replace(' ', '+', $query));
  // Build the basic url
  $url = $target . '?start=' . $start . '&rows=' . $rows . '&query=' . $search_terms . str_replace(" ", "+", $query_facets);
  // Add query contstraints
  if ($has_digital_object == TRUE) {
    $url .= '&hqf=HASDIGITALOBJECT:true';
  }
  // Add hidden query facets
  if (!empty($hqfs)) {
    $hqf_list = explode(",", $hqfs);
    foreach ($hqf_list as $hqf) {
      $url .= '&hqf=' . str_replace(" ", "+", $hqf);
    }
  }
  // Add language
  if($language != 'en') {
    $url .= '&lang=' . $language;
  }

  $results = delvingapi_do_search($url);
  return $results;
}

/**
 * Takes an object id and builds a url to return the object data
 *
 * @param null $obj_id
 * @return
 */
function delvingapi_get_item($obj_id = NULL) {
  $target = variable_get('delving_api_remote_url', DELVING_API_REMOTE_URL);
  $language = variable_get('delving_api_language', DELVING_API_LANGUAGE);
  $url = $target . '?id=' . $obj_id . '&lang=' . $language;
  $results = delvingapi_do_search($url);
  return $results;
}

/**
 * Submits a query to a remote Delving Framework API
 *
 * @param  $url
 * @return
 */
function delvingapi_do_search($url) {
  try {
    // Send out the request
    $response = drupal_http_request($url);
    // We have a response code 200: success!
    if ($response->code == 200) {
      // Set the root of the response data
      $data = $response->data;
      // Cache response and set semaphore for use by blocks.
      delving_static_response_cache($data);
      delving_has_searched(TRUE);

      return $data;
    }
    else {
      // Deal with HTTP errors
      switch ($response->code) {
        case 401:
          drupal_set_message(t('Oh no! A 401. Do we have the correct target url?'));
          break;
        case -61:
          drupal_set_message(t('Oh no! Something went wrong. Could not make a connection to the remote URL'));
        default:
          drupal_set_message(t('Something went wrong @error', array(
            '@error' => 'HTTP ' . $response->code . ': ' . strip_tags($response->data),
          )), 'error');
          break;
      }
    }
  }
  catch (Exception $e) {
    drupal_set_message(t('Error: ' . $e->getMessage(), 'status'));
  }
}

/****** HELPER FUNCTIONS **********************************************************************************************/

/**
 * Grab parameters necessary for search from URL
 *
 * @return array
 */
function delvingapi_get_query_params() {

  $page = isset($_GET['page']) ? $_GET['page'] : 0;
  $rows = variable_get('delving_api_results_rows', DELVING_API_RESULTS_ROWS);
  $start = $page * $rows + 1;
  $query = isset($_GET['query']) ? $_GET['query'] : '';
  $qf_string = '';
  if (isset($_GET['qf'])) {
    $qfs = array_unique($_GET['qf']);
    foreach ($qfs as $qf) {
      $qf_string .= '&qf[]=' . $qf;
    }
  }
  $query_params = array(
    'page' => $page,
    'start' => $start,
    'query' => $query,
    'qf' => $qf_string,
  );


  return $query_params;
}


/**
 * Semaphore that indicates whether a search has been done. Blocks use this
 * later to decide whether they should load or not.
 *
 * @param $searched
 * A boolean indicating whether a search has been executed.
 *
 * @return
 * TRUE if a search has been executed.
 * FALSE otherwise.
 */
function delving_has_searched($searched = NULL) {
  static $_searched = FALSE;
  if (is_bool($searched)) {
    $_searched = $searched;
  }
  return $_searched;
}

function delving_has_facets($has_facets = NULL) {
  static $_has_facets = FALSE;
  if (is_bool($has_facets)) {
    $_has_facets = $has_facets;
  }
  return $_has_facets;
}

/**
 * It is important to hold on to the search response object for the duration of the
 * page request so that we can use it for things like building facet blocks.
 */
function delving_static_response_cache($response = NULL) {
  static $_response;

  if (!empty($response)) {
    $_response = $response;
  }
  return $_response;
}