<?php
/**
 *
 * @file
 * Wrapper for a Delving Remote Search API
 *
 * @author eric@delving.eu
 *
 *
 */

//define('DELVING_SETTINGS_MENU_PATH', 'admin/config/search/delving');
define('DELVING_API_REMOTE_URL', 'http://norvegiana2.delving.org/services/api/search');
define('DELVING_API_RESULTS_NR_ITEMS', 12);
define('DELVING_API_DIGITAL_OBJECT', TRUE);
define('DELVING_API_HQFS', '');
define('DELVING_API_LANGUAGE', 'en');

/**
 * Implement hook_help()
 */
function delvingapi_help($path,$arg) {
  switch($path) {
    case 'admin/help#delvingapi':
      $output = '';
      $output .= '<h3>' .t('About') .'</h3>';
      $output .= '<p>' .t('The Delving Remote Search API module is a search and retrieve back-end which can be pointed at a remote <a href="http://www.delving.eu/" target="_blank" title="Visit the Delving website">Delving Platform</a> instance. This module only contains the query-building and search capabilities and should be used together with the Delving Remote Search Results module to display the search results and facets.') .'</p>';
      $output .= '<h3>' .t('Configuration Help') .'</h3>';
      $output .= '<dl>';
      $output .= '<dt><strong>' .t('API URL') .'</strong></dt>';
      $output .= '<dd>' .t('The API URL is where all queries will be sent to. This must be a valid Delving Platform instance in order for the Delving Search Results Module to function correctly') .'</dd>';
      $output .= '<dt><strong>' .t('Environment Language') .'</strong></dt>';
      $output .= '<dd>' .t('The language in which all metadata field names will be returned') .'</dd>';
      $output .= '<dt><strong>' .t('Nr. Results') .'</strong></dt>';
      $output .= '<dd>' .t('Here you can set the number of results returned per query');
      $output .= '<dt><strong>' .t('Digital Objects Only') .'</strong></dt>';
      $output .= '<dd>' .t('Constrain the query to return only results that contain digital objects (i.e. thumbnails). By setting this to true you will drastically increase the chance that the returned results will contain thumnails.') . '</dd>';
      $output .= '<dt><strong>' .t('Custom Constraints') .'</strong></dt>';
      $output .= '<dd>' .t('Here you can enter a comma separated list of facet constraints for all queries. This is useful if you want to limit your queries to a particular data provider or (if available) county or municipality. Some example constraints are:');
      $output .= '<ul><li>' . t('COUNTY:Oslo,MUNICIPALITY:Majorstuen') . '</li>';
      $output .= '<li>' . t('PROVIDER:"Sunnfjord Museum"') . ' <strong>(' .  t('When using values with multiple words, surround the value with double quotes') . ')</strong></li>';
      $output .= '</ul>';
      $output .= '</dl>';
      return $output;
  }
}

/**
 * Implement hook_menu()
 */
function delvingapi_menu() {
//  $items[variable_get('delving_settings_menu_path', DELVING_SETTINGS_MENU_PATH)] = array(
  $items['admin/config/search/delving-api'] = array(
    'title' => 'Delving Remote Search API Settings',
    'description' => 'Configure Search URL, etc. for Delving Remote Search API',
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('delvingapi_admin_settings'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/delvingapi.admin.inc'
  );
  return $items;
}

/**
 * Takes a query term and builds a url to return a list of results
 *
 * @param null $query
 * @param null $qps
 * @return
 */
function delvingapi_get_list($query = NULL, $qps = NULL) {
  $target = variable_get('delving_api_remote_url', DELVING_API_REMOTE_URL);
  $rows = variable_get('delving_api_results_nr_items', DELVING_API_RESULTS_NR_ITEMS);
  $start = $qps['start'];
  $has_digital_object = variable_get('delving_api_digital_object', DELVING_API_DIGITAL_OBJECT);
  $language = variable_get('delving_api_language', DELVING_API_LANGUAGE);

  $hqfs = variable_get('delving_api_hqfs', DELVING_API_HQFS);
  // remove the [] from the qf[] key before being sent to search api
  $query_facets = str_replace('qf[]=', 'qf=', $qps['qf']);

  // Do some housekeeping on the query before sending it on its way
  $search_terms = urlencode($query);

  // Put the search term(s) in a cookie for re-use on the object page
  setcookie("delving-query", $query);

  // Build the basic url
  $url = $target . '?start=' . $start . '&rows=' . $rows . '&query=' . $search_terms . str_replace(" ", "+", $query_facets);
  // Add query contstraints
  if ($has_digital_object == TRUE) {
    $url .= '&hqf=HASDIGITALOBJECT:true';
  }
  // Add hidden query facets
  if (!empty($hqfs)) {
    $hqf_list = explode(",", $hqfs);
    foreach ($hqf_list as $hqf) {
      $url .= '&hqf=' . str_replace(" ", "+", $hqf);
    }
  }
  // Add language
  if($language != 'en') {
    $url .= '&lang=' . $language;
  }

  $results = delvingapi_do_search($url);
  return $results;
}

/**
 * Takes an object id and builds a url to return the object data
 *
 * @param null $obj_id
 * @return
 */
function delvingapi_get_item($obj_id = NULL) {
  $target = variable_get('delving_api_remote_url', DELVING_API_REMOTE_URL);
  $language = variable_get('delving_api_language', DELVING_API_LANGUAGE);
  $url = $target . '?id=' . $obj_id . '&lang=' . $language;
  $results = delvingapi_do_search($url);
  return $results;
}

/**
 * Submits a query to a remote Delving Framework API
 *
 * @param  $url
 * @return
 */
function delvingapi_do_search($url) {
  try {
    // Send out the request
    $response = drupal_http_request($url);
    // We have a response code 200: success!
    if ($response->code == 200) {
      // Set the root of the response data
      $data = $response->data;
//      drupal_set_message($data);
//      var_dump($data);
      // Cache response and set semaphore for use by blocks.
      delving_static_response_cache($data);
      delving_has_searched(TRUE);

      return $data;
    }
    else {
      // Deal with HTTP errors
      switch ($response->code) {
        case 401:
          drupal_set_message(t('Oh no! A 401. Do we have the correct target url?'));
          break;
        case -61:
          drupal_set_message(t('Oh no! Something went wrong. Could not make a connection to the remote URL'));
        default:
          drupal_set_message(t('Something went wrong @error', array(
            '@error' => 'HTTP ' . $response->code . ': ' . strip_tags($response->data),
          )), 'error');
          break;
      }
    }
  }
  catch (Exception $e) {
    drupal_set_message(t('Error: ' . $e->getMessage(), 'status'));
  }
}

/****** HELPER FUNCTIONS **********************************************************************************************/

/**
 * Grab parameters necessary for search from URL
 *
 * @return array
 */
function delvingapi_get_query_params() {

  $page = isset($_GET['page']) ? $_GET['page'] : 0;
  $rows = variable_get('delving_api_results_rows', DELVING_API_RESULTS_NR_ITEMS);
  $start = $page * $rows + 1;
  $query = isset($_GET['query']) ? $_GET['query'] : '';
  $qf_string = '';
  if (isset($_GET['qf'])) {
    $qfs = array_unique($_GET['qf']);
    foreach ($qfs as $qf) {
      $qf_string .= '&qf[]=' . $qf;
    }
  }
  $query_params = array(
    'page' => $page,
    'start' => $start,
    'query' => $query,
    'qf' => $qf_string,
  );


  return $query_params;
}


/**
 * Semaphore that indicates whether a search has been done. Blocks use this
 * later to decide whether they should load or not.
 *
 * @param $searched
 * A boolean indicating whether a search has been executed.
 *
 * @return
 * TRUE if a search has been executed.
 * FALSE otherwise.
 */
function delving_has_searched($searched = NULL) {
  static $_searched = FALSE;
  if (is_bool($searched)) {
    $_searched = $searched;
  }
  return $_searched;
}

function delving_has_facets($has_facets = NULL) {
  static $_has_facets = FALSE;
  if (is_bool($has_facets)) {
    $_has_facets = $has_facets;
  }
  return $_has_facets;
}

/**
 * It is important to hold on to the search response object for the duration of the
 * page request so that we can use it for things like building facet blocks.
 */
function delving_static_response_cache($response = NULL) {
  static $_response;

  if (!empty($response)) {
    $_response = $response;
  }
  return $_response;
}

